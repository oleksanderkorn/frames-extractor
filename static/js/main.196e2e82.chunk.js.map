{"version":3,"sources":["App.tsx","extractFrames.js","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","images","display","flexWrap","width","height","App","useState","sources","src","setSrc","fps","setFps","rowSize","setRowSize","isLoading","setIsLoading","frames","setFrames","classes","useEffect","videoUrl","Promise","resolve","a","fetch","then","r","blob","videoBlob","videoObjectUrl","URL","createObjectURL","video","document","createElement","addEventListener","seekResolve","duration","Infinity","isNaN","readyState","setTimeout","currentTime","Math","random","canvas","context","getContext","videoWidth","videoHeight","thumbWidth","thumbHeight","maxLine","interval","elementsPerLine","currentPosition","currentLine","dx","dy","thumbnails","drawImage","console","log","length","push","toDataURL","clearRect","extractFramesFromVideo","newFrames","catch","err","error","className","Grid","container","direction","justifyContent","alignItems","item","xs","Typography","Autocomplete","freeSolo","style","options","onChange","event","value","reason","details","onBlur","prev","target","renderInput","params","TextField","label","variant","fullWidth","id","e","newValue","Number","LinearProgress","hidden","controls","map","imgSrc","index","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.196e2e82.chunk.js","sourcesContent":["import { ChangeEvent, FocusEvent, useEffect, useState } from 'react';\nimport './App.css';\nimport { extractFramesFromVideo } from './extractFrames';\nimport { Theme, Typography } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core';\nimport { createStyles } from '@material-ui/core';\nimport { LinearProgress } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport Autocomplete, { AutocompleteChangeDetails, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    images: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(16),\n        height: theme.spacing(16),\n      },\n    },\n  }),\n);\n\nfunction App() {\n  const [sources] = useState([\n    \"https://sumer-dev-2.joystream.app/storage/asset/v0/5FuptcSboufhRcwxn8JE6MXLJtGfhBmFvP1bqwh3p3D4dYKc\",\n    \"https://sumer-dev-2.joystream.app/storage/asset/v0/5GKTQfWbwZAB8jga2VbwLZRSwfsjVBi4c2ZEH4LgRAT4MKft\",\n    \"https://sumer-dev-2.joystream.app/storage/asset/v0/5HEzeVFhsx4h2nGVLh5SLL5XR66mN51jdC59Crfpn5APpkxj\",\n    \"https://sumer-dev-2.joystream.app/storage/asset/v0/5FMGcHNAop6bDgHMSTS1waSHYz82mLP43KPSkdb5emQ9SLQ8\",\n    \"https://sumer-dev-2.joystream.app/storage/asset/v0/5EyvUgQjngCWwGN95pRrWrbAQsrh7pAYc87R9ASJX3eswVEc\",\n    \"https://video.keralalivestream.com/storage/asset/v0/5DqFvYRsTUGzsks3eoF5YANQy8r3c8J21CbppccXX9yeBadQ\"\n  ])\n  const [src, setSrc] = useState(sources[0])\n  const [fps, setFps] = useState(1)\n  const [rowSize, setRowSize] = useState(5)\n  const [isLoading, setIsLoading] = useState(false)\n  const [frames, setFrames] = useState([])\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (src !== '' && fps > 0 && rowSize > 0) {\n      setIsLoading(true)\n      extractFramesFromVideo(src, fps, rowSize).then(newFrames => {\n        setIsLoading(false)\n        setFrames(newFrames)\n      }).catch(err => {\n        setIsLoading(false)\n        console.error(err)\n      })\n    }\n  }, [src, fps, rowSize])\n\n  const updateSrc = (event: ChangeEvent<{}>, value: string | null, reason: AutocompleteChangeReason, details?: AutocompleteChangeDetails<string> | undefined) => {\n    setSrc(value || '')\n  }\n\n  const updateSrcOnBlur = (event: FocusEvent<HTMLDivElement> & { target: HTMLInputElement}) => {\n      setSrc((prev) => prev !== event.target.value ? event.target.value : prev)\n  }\n\n  const updateFps = (e: { target: { value: any; }; }) => {\n    const newValue = Number(e.target.value)\n    if(newValue < 1) {\n      setFps(1)\n    } else {\n      setFps(newValue)\n    }\n  }\n\n  const updateRowSize = (e: { target: { value: any; }; }) => {\n    const newValue = Number(e.target.value)\n    if(newValue < 1) {\n      setRowSize(1)\n    } else {\n      setRowSize(newValue)\n    }\n  }\n\n  return (\n    <div className={classes.root} >\n      <Grid\n        container\n        spacing={3}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={6} className={classes.root}>\n          <Typography>Settings:</Typography>\n          <Autocomplete\n              freeSolo\n              style={{ width: '100%' }}\n              options={sources}\n              onChange={(updateSrc)}\n              onBlur={updateSrcOnBlur}\n              value={src}\n              renderInput={(params) => <TextField {...params} label=\"Video src\" variant=\"filled\" />} />\n          <TextField variant=\"filled\" fullWidth id=\"fps\" label=\"FPS\" value={fps} onChange={updateFps} />\n          <TextField variant=\"filled\" fullWidth id=\"rowSize\" label=\"Frames Per Line\" value={rowSize} onChange={updateRowSize} />\n          <LinearProgress hidden={!isLoading} />\n          <Typography hidden={frames.length === 0}>Extracted Frames:</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          {src && (<video controls height={300} src={src}></video>)}\n        </Grid>\n        {frames.map((imgSrc, index) => (\n          <Grid item xs={12} key={index}>\n            <Typography>Image {index}</Typography>\n            <img src={imgSrc} alt={`i-${index}`} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","export const extractFramesFromVideo = (videoUrl, fps, rowSize) => {\n    return new Promise(async(resolve) => {\n\n        // fully download it first (no buffering):\n        let videoBlob = await fetch(videoUrl).then(r => r.blob());\n        let videoObjectUrl = URL.createObjectURL(videoBlob);\n        let video = document.createElement(\"video\");\n\n        let seekResolve;\n        video.addEventListener('seeked', async function() {\n            if (seekResolve) seekResolve();\n        });\n\n        video.src = videoObjectUrl;\n\n        // workaround chromium metadata bug (https://stackoverflow.com/q/38062864/993683)\n        while ((video.duration === Infinity || isNaN(video.duration)) && video.readyState < 2) {\n            await new Promise(r => setTimeout(r, 1000));\n            video.currentTime = 10000000 * Math.random();\n        }\n        let duration = video.duration;\n\n        let canvas = document.createElement('canvas');\n        let context = canvas.getContext('2d');\n        let [w, h] = [video.videoWidth, video.videoHeight]\n        const thumbWidth = w / 5;\n        const thumbHeight = h / 5;\n        const maxLine = 4\n\n        canvas.width = thumbWidth * rowSize;\n        canvas.height = thumbHeight * maxLine;\n\n        let interval = 1 / fps;\n        let currentTime = 0;\n\n        const elementsPerLine = rowSize\n\n        let currentPosition = 0\n        let currentLine = 0\n        let dx = 0\n        let dy = 0\n\n        let thumbnails = []\n\n\n        while (currentTime < duration) {\n            video.currentTime = currentTime;\n            // TODO fix and rewrite to ts\n            // eslint-disable-next-line \n            await new Promise(r => seekResolve = r);\n\n            context.drawImage(video, dx, dy, thumbWidth, thumbHeight);\n            console.log(`time[${currentTime}] image [${thumbnails.length}] line[${currentLine}] x[${dx}] y[${dy}] w[${canvas.width}] h[${canvas.height}]`)\n\n            if (currentPosition < elementsPerLine - 1) {\n                dx += thumbWidth\n                currentPosition += 1;\n            } else {\n                dx = 0\n                dy += thumbHeight\n                currentPosition = 0\n                currentLine += 1\n            }\n            if (currentLine === maxLine) {\n                currentLine = 0\n                console.log('push full image')\n                thumbnails.push(canvas.toDataURL())\n                context.clearRect(0, 0, canvas.width, canvas.height);\n                dx = 0\n                dy = 0\n            } else if (currentTime + interval >= duration) {\n                console.log('push last image')\n                thumbnails.push(canvas.toDataURL())\n            }\n            currentTime += interval;\n        }\n        resolve(thumbnails);\n    });\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}